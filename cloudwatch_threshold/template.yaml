AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Template for CloudWatch Alerts Threshold

Globals:
  Function:
    Runtime: python3.8

Resources:
  # # # # # # # # CLOUDWATCH ITEMS # # # # # # # #
  # EVENTS
  LoggingLambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: LoggingLambda_Rule
      Description: Rule to have logger constantly creating logs in LogStreamForLambda
      ScheduleExpression: cron(/5 * ?* * * *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt LoggingLambda.Arn
          Id: Id1337
          Input: >
            {
              "logs": [
                { "username": "gsilva", "message": "Find me!" },
                { "username": "gsilva", "message": "Find me too!" },
                { "username": "epuerta", "message": "Don't find me!" }
              ],
              "log_groups": [
                "LogGroupForLambda1",
                "LogGroupForLambda2"
              ]
            }
  InsightQueryLambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: InsightQueryLambda_Rule
      Description: Rule to have query constantly scan logs in LogStreamForLambda
      ScheduleExpression: cron(/10 * ?* * * *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt InsightQueryLambda.Arn
          Id: Id1338
  DeleteItemsLambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: DeleteItemsLambda_Rule
      Description: Rule to have delete items in DynamoDB table
      ScheduleExpression: cron(/1 * * ?* * *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt DeleteItemsLambda.Arn
          Id: Id1339

  # EVENT PERMISSIONS
  LoggingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LoggingLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt LoggingLambdaEvent.Arn
  InsightQueryLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref InsightQueryLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt InsightQueryLambdaEvent.Arn
  DeleteItemsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref DeleteItemsLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt DeleteItemsLambdaEvent.Arn

  # LOG GROUP/STREAM
  LogGroupForLambda1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: LogGroupForLambda1
  LogGroupForLambda2:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: LogGroupForLambda2
  LogStreamForLambda1:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroupForLambda1
      LogStreamName: LogStreamForLambda
  LogStreamForLambda2:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref LogGroupForLambda2
      LogStreamName: LogStreamForLambda
  # # # # # # # # IAM ITEMS # # # # # # # #
  # ROLES
  LoggingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: LoggingLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "logs:*"
                Resource: "arn:aws:logs:us-east-1:700080211091:*"
  InsightQueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess"
      Policies:
        - PolicyName: DynamoUpdateAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: DynamoActions
                Effect: Allow
                Action:
                  - dynamodb:Query
                  - dynamodb:DescribeTable
                  - dynamodb:PutItem
                Resource: !GetAtt DynamoTable.Arn
              - Sid: SnsActions
                Effect: Allow
                Action:
                  - sns:Publish
                Resource: "arn:aws:sns:us-east-1:700080211091:email_to_me"
  DeleteItemsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: DynamoDeleteAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                Resource: !GetAtt DynamoTable.Arn
  # # # # # # # # LAMBDA ITEMS # # # # # # # #
  # LAYERS
  ClassLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: QueryHandlerLayer
      Description: Layer that contains the class for the insights query
      ContentUri: python/
      CompatibleRuntimes:
        - python3.8
      LicenseInfo: ""
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.8
  # LAYER PERMISSIONS
  ClassLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref ClassLayer
      Principal: !Ref AWS::AccountId
  # FUNCTIONS
  LoggingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/logger/
      FunctionName: Logging_Lambda
      Handler: logger.main
      Timeout: 5
      Role: !GetAtt LoggingLambdaRole.Arn
  InsightQueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/insights/
      FunctionName: InsightQuery_Lambda
      Handler: insights.main
      Timeout: 60
      Layers:
        - Ref: ClassLayer
      Role: !GetAtt InsightQueryLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoTable
          SNS_TOPIC: "arn:aws:sns:us-east-1:700080211091:email_to_me"
  DeleteItemsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/delete
      FunctionName: DeleteItems_Lambda
      Handler: delete_items.main
      Timeout: 10
      Role: !GetAtt DeleteItemsLambdaRole.Arn
      Environment:
        Variables:
          DYNAMODB_TABLE: !Ref DynamoTable
  # # # # # # # # DYNAMODB ITEMS # # # # # # # #
  # TABLES
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClientErrorCounts
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
        - AttributeName: query_name
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
        - AttributeName: query_name
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
