AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Template for CloudWatch Alerts Threshold
Globals:
  Function:
    Runtime: python3.8
Resources:
  LoggingLambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: LoggingLambda_Rule
      Description: Rule to have logger constantly creating logs in LogStreamForLambda
      ScheduleExpression: cron(/5 * ?* * * *)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - LoggingLambda
          - Arn
        Id: Id1337
        Input: "{\n  \"logs\": [\n    { \"username\": \"gsilva\", \"message\": \"\
          Find me!\" },\n    { \"username\": \"gsilva\", \"message\": \"Find me too!\"\
          \ },\n    { \"username\": \"epuerta\", \"message\": \"Don't find me!\" }\n\
          \  ],\n  \"log_groups\": [\n    \"LogGroupForLambda1\",\n    \"LogGroupForLambda2\"\
          \n  ]\n}\n"
  InsightQueryLambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: InsightQueryLambda_Rule
      Description: Rule to have query constantly scan logs in LogStreamForLambda
      ScheduleExpression: cron(/10 * ?* * * *)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - InsightQueryLambda
          - Arn
        Id: Id1338
  DeleteItemsLambdaEvent:
    Type: AWS::Events::Rule
    Properties:
      Name: DeleteItemsLambda_Rule
      Description: Rule to have delete items in DynamoDB table
      ScheduleExpression: cron(/1 * * ?* * *)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - DeleteItemsLambda
          - Arn
        Id: Id1339
  LoggingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: LoggingLambda
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - LoggingLambdaEvent
        - Arn
  InsightQueryLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: InsightQueryLambda
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - InsightQueryLambdaEvent
        - Arn
  DeleteItemsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: DeleteItemsLambda
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - DeleteItemsLambdaEvent
        - Arn
  LogGroupForLambda1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: LogGroupForLambda1
  LogGroupForLambda2:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: LogGroupForLambda2
  LogStreamForLambda1:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: LogGroupForLambda1
      LogStreamName: LogStreamForLambda
  LogStreamForLambda2:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName:
        Ref: LogGroupForLambda2
      LogStreamName: LogStreamForLambda
  LoggingLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: LoggingLambdaPolicy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: logs:*
            Resource: arn:aws:logs:us-east-1:700080211091:*
  InsightQueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/CloudWatchLogsReadOnlyAccess
      Policies:
      - PolicyName: DynamoUpdateAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: DynamoActions
            Effect: Allow
            Action:
            - dynamodb:Query
            - dynamodb:DescribeTable
            - dynamodb:PutItem
            Resource:
              Fn::GetAtt:
              - DynamoTable
              - Arn
          - Sid: SnsActions
            Effect: Allow
            Action:
            - sns:Publish
            Resource: arn:aws:sns:us-east-1:700080211091:email_to_me
  DeleteItemsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: DynamoDeleteAccess
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            - dynamodb:DeleteItem
            Resource:
              Fn::GetAtt:
              - DynamoTable
              - Arn
  ClassLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: QueryHandlerLayer
      Description: Layer that contains the class for the insights query
      ContentUri: ClassLayer
      CompatibleRuntimes:
      - python3.8
      LicenseInfo: ''
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.8
  ClassLayerPermission:
    Type: AWS::Lambda::LayerVersionPermission
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn:
        Ref: ClassLayer
      Principal:
        Ref: AWS::AccountId
  LoggingLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: LoggingLambda
      FunctionName: Logging_Lambda
      Handler: logger.main
      Timeout: 5
      Role:
        Fn::GetAtt:
        - LoggingLambdaRole
        - Arn
  InsightQueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: InsightQueryLambda
      FunctionName: InsightQuery_Lambda
      Handler: insights.main
      Timeout: 60
      Layers:
      - Ref: ClassLayer
      Role:
        Fn::GetAtt:
        - InsightQueryLambdaRole
        - Arn
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Ref: DynamoTable
          SNS_TOPIC: arn:aws:sns:us-east-1:700080211091:email_to_me
  DeleteItemsLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: DeleteItemsLambda
      FunctionName: DeleteItems_Lambda
      Handler: delete_items.main
      Timeout: 10
      Role:
        Fn::GetAtt:
        - DeleteItemsLambdaRole
        - Arn
      Environment:
        Variables:
          DYNAMODB_TABLE:
            Ref: DynamoTable
  DynamoTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ClientErrorCounts
      AttributeDefinitions:
      - AttributeName: username
        AttributeType: S
      - AttributeName: query_name
        AttributeType: S
      KeySchema:
      - AttributeName: username
        KeyType: HASH
      - AttributeName: query_name
        KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
